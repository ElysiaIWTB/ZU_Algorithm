// 4_15_顺序存储的二叉树的最近的公共祖先问题.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//设顺序存储的二叉树中有编号为i和j的两个结点，请设计算法求出它们最近的公共祖先结点的编号和值。

//输入格式:
//输入第1行给出正整数n（≤1000），即顺序存储的最大容量；第2行给出n个非负整数，其间以空格分隔。其中0代表二叉树中的空结点（如果第1个结点为0，则代表一棵空树）；第3行给出一对结点编号i和j。
//题目保证输入正确对应一棵二叉树，且1≤i, j≤n。
//输出格式 :
//如果i或j对应的是空结点，则输出ERROR: T[x] is NULL，其中x是i或j中先发现错误的那个编号；否则在一行中输出编号为i和j的两个结点最近的公共祖先结点的编号和值，其间以1个空格分隔。

//输入样例1：
//15
//4 3 5 1 10 0 7 0 2 0 9 0 0 6 8
//11 4
//输出样例1：
//2 3

#include <iostream>
#define MAXN 1001
using namespace std;

int main()
{
	int Data[MAXN];
	int n, i, j, x;
	cin >> n;
	Data[0] = 0;
	for (x = 1; x <= n; x++)
		cin >> Data[x];
	cin >> i >> j;
	if (!Data[i]) cout << "ERROR: T[" << i << "] is NULL" << endl;
	else if (!Data[j]) cout << "ERROR: T[" << j << "] is NULL" << endl;
	else {
		while (i != j)
		{
			if (i < j) {
				x = i; i = j; j = x;
			}
			while (i > j) i /= 2;
		}
		cout << i << " " << Data[i];
	}
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
