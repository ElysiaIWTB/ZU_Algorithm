// 2_15_整数分解为若干项之和.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//将一个正整数N分解成几个正整数相加，可以有多种分解方法，例如7=6+1，7=5+2，7=5+1+1，…。编程求出正整数N的所有整数分解式子。

//输入格式：
//每个输入包含一个测试用例，即正整数N(0 < N≤30)。
//输出格式：	按递增顺序输出N的所有整数分解式子。
//输入样例：
//7
//输出样例：
//7 = 1 + 1 + 1 + 1 + 1 + 1 + 1;7 = 1 + 1 + 1 + 1 + 1 + 2;7 = 1 + 1 + 1 + 1 + 3;7 = 1 + 1 + 1 + 2 + 2
//7 = 1 + 1 + 1 + 4;7 = 1 + 1 + 2 + 3;7 = 1 + 1 + 5;7 = 1 + 2 + 2 + 2
//7 = 1 + 2 + 4;7 = 1 + 3 + 3;7 = 1 + 6;7 = 2 + 2 + 3
//7 = 2 + 5;7 = 3 + 4;7 = 7

#include <iostream>

using namespace std;
int sum = 0, pos = -1, countN = 0, N;//定义试探和，试探数组指针，试探成功次数计数器，待匹配数 
int Result[31];//定义试探数组，存放试探数字 
void DFS(int x)//深度优先搜索，层层递归，逐一试探 
{
	if (sum == N)//如果试探和等于待匹配数 
	{
		countN++;//成功次数+1 
		cout << N << '=';
		for (int i = 0;i < pos;i++)//输出试探数 
			cout << Result[i] << '+';
		if (countN % 4 == 0 || Result[pos] == N)//判定最后一个试探数的情况 
		//如果成功次数为4的倍数或者试探数等于待匹配数 
			cout << Result[pos] << '\n';//输出试探数并换行 
		else
			cout << Result[pos] << ';';//否则按格式输出 
		return;
	}
	else if (sum > N)//如果试探和大于待匹配数，则返回到上一层 
		return;
	for (int i = x;i <= N;i++)//范围从输入参数，即上一层传进来的试探数开始到待匹配数 
	{
		Result[++pos] = i;//指针指向下一位置并保存当前变量为试探数 
		sum += i;//试探和累加试探数 
		DFS(i);//递归试探 
		sum -= i;//试探完毕后减去试探数，以待下一循环加上新的试探数来试探 
		pos--;//指针回复到原来的位置，以待下一次自增并保存新的试探数 
	}//注意，sum,pos作为全局变量，在连续递归调用的情况下会一直自增，故无需担心自增后马上被减去
}
int main()
{
	cin >> N;
	DFS(1);
	return 0;
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
