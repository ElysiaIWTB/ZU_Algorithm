// 3_09_银行业务队列简单模拟.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//案例3-1.9 银行业务队列简单模拟 (25分)
//设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍 —— 即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。

//输入格式 :
//输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。
//输出格式 :
//按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。

//输入样例 :
//8 2 1 3 9 4 11 13 15
//输出样例 :
//1 3 2 9 11 4 13 15

#include <iostream>
#define MAXN 1001
using namespace std;

int main()
{
	int N, tmp, p, q;
	int A[MAXN] = { 0 };
	int B[MAXN] = { 0 };
	cin >> N;
	p = q = 0;
	for (int i = 0; i < N; i++)
	{
		cin >> tmp;
		if (tmp % 2 == 0) B[q++] = tmp;
		else A[p++] = tmp;
	}
	if (A[0] != 0) {
		cout << A[0];
		if (A[1] != 0) cout << " " << A[1];
		if (B[0] != 0) cout << " " << B[0];
	}
	else cout << B[0];
	int i = 1;
	while (A[2 * i] != 0 || B[i] != 0)
	{
		if (A[2 * i] != 0) {
			cout << " " << A[2 * i];
			if (A[2 * i + 1] != 0) cout << " " << A[2 * i + 1];
		}
		if(B[i] != 0) cout << " " << B[i];
		i++;
	}
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
